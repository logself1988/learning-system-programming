{
	// Place your pro workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Template": {
		"prefix": ["main", "ske", "temp"],
		"body": ["# An example of $0",
			"",
			".section .data",
			"value:",
			"    .int 1, -1",
			"",
			".section .bss",
			"    .lcomm buffer, 10",
			"",
			".section .text",
			".globl _start",
			"_start:",
			"",
			"    movl \\$1, %eax",
			"    movl \\$0, %ebx",
			"    int \\$0x80",
			""],
		"description": "A template for main assembly program"
	},
	"Template C Style Assembly Function": {
		"prefix": ["func"],
		"body": [".section .text",
			".type $0, @function",
			".globl $0",
			"$0:",
			"    pushl %ebp",
			"    movl %esp, %ebp",
			"",
			"    ",
			"",
			"    movl %ebp, %esp",
			"    popl %ebp",
			"    ret",
			""],
		"description": "A template for C style assembly function"
	},
	"Template C": {
		"prefix": ["mainc"],
		"body": ["/* An example of $0*/",
			"#include <stdio.h>",
			"",
			"int main(int argc, char **argv)",
			"{",
			"\treturn 0;",
			"}",
			""],
		"description": "A template for main c program"
	},
	"dollar": { "prefix": ["do"], "body": ["\\$"], "description": "dollar symbol" },
	"registers": { "prefix": ["reg"], "body": ["%e$0x"], "description": "registers" },
	"eax": { "prefix": ["eax"], "body": ["%eax"], "description": "eax" },
	"ebx": { "prefix": ["ebx"], "body": ["%ebx"], "description": "ebx" },
	"ecx": { "prefix": ["ecx"], "body": ["%ecx"], "description": "ecx" },
	"edx": { "prefix": ["edx"], "body": ["%edx"], "description": "edx" },
	"esp": { "prefix": ["esp"], "body": ["%esp"], "description": "esp" },
	"ebp": { "prefix": ["ebp"], "body": ["%ebp"], "description": "ebp" },
	"esi": { "prefix": ["esi"], "body": ["%esi"], "description": "esi" },
	"edi": { "prefix": ["edi"], "body": ["%edi"], "description": "edi" },
	"st": { "prefix": ["st"], "body": ["%st($0)"], "description": "st" },
	"mmx": { "prefix": ["mm"], "body": ["%mm$0"], "description": "mmx" },
	"sse": { "prefix": ["xmm"], "body": ["%xmm$0"], "description": "sse" },


	"interrupt": { "prefix": ["int"], "body": ["int \\$0x80"], "description": "interrupe"}
}