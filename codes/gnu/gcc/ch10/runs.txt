# hello.h, hello_fn.c, bye_fn.c, main.c

$ gcc -Wall -c hello_fn.c
$ gcc -Wall -c bye_fn.c
$ ar cr libhello.a hello_fn.o bye_fn.o
$ ar t libhello.a
hello_fn.o
bye_fn.o

$ gcc -Wall main.c libhello.a -o main
$ ./main
Hello, everyone!
Goodbye!

$ gcc -Wall -L. main.c -lhello -o main
$ ./main
Hello, everyone!
Goodbye!

# collatz.c

$ gcc -Wall -c -pg collatz.c
$ ls
bye_fn.c  collatz.c  collatz.o  hello.h  hello_fn.c  main.c  runs.txt
$ gcc -Wall -pg collatz.o

$ gprof a.out
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ns/call  ns/call  name
 62.06      0.17     0.17   499999   335.13   528.08  nseq
 35.73      0.26     0.10 62135400     1.55     1.55  step
  1.88      0.27     0.01                             frame_dummy
  1.88      0.27     0.01                             main

# cov.c

$ gcc -Wall -fprofile-arcs -ftest-coverage cov.c
$ ./a.out
3 is divisible by 3
6 is divisible by 3
9 is divisible by 3
$ ls | grep cov
cov.c
cov.gcda
cov.gcno
$ gcov cov.c
File 'cov.c'
Lines executed:85.71% of 7
Creating 'cov.c.gcov'

$ cat cov.c.gcov
        -:    0:Source:cov.c
        -:    0:Graph:cov.gcno
        -:    0:Data:cov.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:
        1:    3:int main (int argc, char **argv)
        -:    4:{
        -:    5:    int i ;
       10:    6:    for (i = 1; i < 10; i++)
        -:    7:    {
        9:    8:        if (i % 3 == 0)
        3:    9:            printf("%d is divisible by 3\n", i);
        9:   10:        if (i % 11 == 0)
    #####:   11:            printf("%d is divisible by 11\n", i);
        -:   12:    }
        -:   13:
        1:   14:    return 0;
        -:   15:}