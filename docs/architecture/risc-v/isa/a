??? summary "<font color="red">add</font> rd, rs1, rs2 (Add). <font color="green">rv_i</font> "

    x[rd] = x[rs1] + x[rs2].

    Add register x[rs2] to register x[rs1] and write the result to x[rd].

    Arithmetic overflow is ignored.

??? question "<font color="red">add16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">add32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">add64</font> rs2, rs1, rd (). <font color="green">rv32_p</font> "

    .

??? question "<font color="red">add8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">add.uw</font> rd, rs1, rs2 (). <font color="green">rv64_zba</font> "

    .

??? question "<font color="red">addd</font> rd, rs1, rs2 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">addi</font> rd, rs1, imm12 (Add Immediate). <font color="green">rv_i</font> "

    x[rd] = x[rs1] + sext(imm12).

    Add the sign-extended immediate to register x[rs1] and write the result to x[rd].

    Arithmetic overflow is ignored.

??? question "<font color="red">addid</font> rd, rs1, imm12 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">addiw</font> rd, rs1, imm12 (Add Word Immediate). <font color="green">rv64_i</font> "

    x[rd] = sext((x[rs1] + sext(imm12))[31:0]).

    Add the sign-extended immediate to x[rs1], truncate the result to 32 bits, and write the sign-extended result to x[rd].

    Arithmetic overflow is ignored.

??? summary "<font color="red">addw</font> rd, rs1, rs2 (Add Word). <font color="green">rv64_i</font> "

    x[rd] = sext((x[rs1] + x[rs2])[31:0]).

    Add register x[rs2] to register x[rs1], truncate the result to 32 bits, and write the sign-extended result to x[rd].

    Arithmetic overflow is ignored.

??? question "<font color="red">aes32dsi</font> rd, rs1, rs2, bs (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">aes32dsmi</font> rd, rs1, rs2, bs (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">aes32esi</font> rd, rs1, rs2, bs (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">aes32esmi</font> rd, rs1, rs2, bs (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">aes64ds</font> rd, rs1, rs2 (). <font color="green">rv64_zknd</font> "

    .

??? question "<font color="red">aes64dsm</font> rd, rs1, rs2 (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">aes64es</font> rd, rs1, rs2 (). <font color="green">rv64_zkne</font> "

    .

??? question "<font color="red">aes64esm</font> rd, rs1, rs2 (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">aes64im</font> rd, rs1 (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">aes64ks1i</font> rd, rs1, rnum (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">aes64ks2</font> rd, rs1, rs2 (). <font color="green">rv64_zk</font> "

    .

??? summary "<font color="red">amoadd.d</font> rd, rs2, (rs1) (Atomic Memory Operation: Add Doubleword). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] + x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to `t`+x[rs2].
    Set x[rd] to `t`.

??? summary "<font color="red">amoadd.w</font> rd, rs2, (rs1) (Atomic Memory Operation: Add Word). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] + x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to `t`+x[rs2].
    Set x[rd] to `t`.

??? summary "<font color="red">amoand.d</font> rd, rs2, (rs1) (Atomic Memory Operation: AND Doubleword). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] & x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to the bitwise AND of  `t` and x[rs2].
    Set x[rd] to the sign extention of `t`.

??? summary "<font color="red">amoand.w</font> rd, rs2, (rs1) (Atomic Memory Operation: AND Word). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] & x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to the bitwise AND of  `t` and x[rs2].
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">amomax.d</font> rd, rs2, (rs1) (Atomic Memory Operation: Maximum Doubleword). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] MAX x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to the larger of `t` and x[rs2], using a two's complement comparison.
    Set x[rd] to `t`.

??? summary "<font color="red">amomax.w</font> rd, rs2, (rs1) (Atomic Memory Operation: Maximum Word). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] MAX x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to the larger of `t` and x[rs2], using a two's complement comparison.
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">amomaxu.d</font> rd, rs2, (rs1) (Atomic Memory Operation: Maximum Doubleword, Unsigned). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] MAXU x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to the larger of `t` and x[rs2], using an unsigned comparison.
    Set x[rd] to `t`.

??? summary "<font color="red">amomaxu.w</font> rd, rs2, (rs1) (Atomic Memory Operation: Maximum Word, Unsigned). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] MAXU x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to the larger of `t` and x[rs2], using an unsigned comparison.
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">amomin.d</font> rd, rs2, (rs1) (Atomic Memory Operation: Minimum Doubleword). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] MIN x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to the smaller of `t` and x[rs2], using a two's complement comparison.
    Set x[rd] to `t`.

??? summary "<font color="red">amomin.w</font> rd, rs2, (rs1) (Atomic Memory Operation: Minimum Word). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] MIN x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to the smaller of `t` and x[rs2], using a two's complement comparison.
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">amominu.d</font> rd, rs2, (rs1) (Atomic Memory Operation: Minimum Doubleword, Unsigned). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] MINU x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to the smaller of `t` and x[rs2], using an unsigned comparison.
    Set x[rd] to `t`.

??? summary "<font color="red">amominu.w</font> rd, rs2, (rs1) (Atomic Memory Operation: Minimum Word, Unsigned). <font color="green">rv_a</font> "

    .x[rd] = AMO32(M[x[rs1]] MINU x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to the smaller of `t` and x[rs2], using an unsigned comparison.
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">amoor.d</font> rd, rs2, (rs1) (Atomic Memory Operation: OR Doubleword). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] | x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to the bitwise OR of `t` and x[rs2].
    Set x[rd] to `t`.

??? summary "<font color="red">amoor.w</font> rd, rs2, (rs1) (Atomic Memory Operation: OR Word). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] | x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to the bitwise OR of `t` and x[rs2].
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">amoswap.d</font> rd, rs2, (rs1) (Atomic Memory Operation: Swap Doubleword). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] SWAP x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to x[rs2].
    Set x[rd] to `t`.

??? summary "<font color="red">amoswap.w</font> rd, rs2, (rs1) (Atomic Memory Operation: Swap Word). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] SWAP x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to x[rs2].
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">amoxor.d</font> rd, rs2, (rs1) (Atomic Memory Operation: XOR Doubleword). <font color="green">rv64_a</font> "

    x[rd] = AMO64(M[x[rs1]] ^ x[rs2]).

    Atomically, let `t` be the value of the memory doubleword at address x[rs1]. then set that memory doubleword to the bitwise XOR of `t` and x[rs2].
    Set x[rd] to `t`.

??? summary "<font color="red">amoxor.w</font> rd, rs2, (rs1) (Atomic Memory Operation: XOR Word). <font color="green">rv_a</font> "

    x[rd] = AMO32(M[x[rs1]] ^ x[rs2]).

    Atomically, let `t` be the value of the memory word at address x[rs1]. then set that memory word to the bitwise XOR of `t` and x[rs2].
    Set x[rd] to the sign extension of `t`.

??? summary "<font color="red">and</font> rd, rs1, rs2 (AND). <font color="green">rv_i</font> "

    x[rd] = x[rs1] & x[rs2].

    Compute the bitwise AND of registers x[rs1] and x[rs2], and write the result to x[rd].

??? summary "<font color="red">andi</font> rd, rs1, imm12 (AND Immediate). <font color="green">rv_i</font> "

    x[rd] = x[rs1] & sext(imm12).

    Compute the bitwise AND of the sign-extended immediate and register  x[rs1] and write the result to x[rd].

??? question "<font color="red">andn</font> rd, rs1, rs2 (). <font color="green">rv_zbkb</font> "

    .

??? summary "<font color="red">auipc</font> rd, imm20 (Add Upper Immediate to PC). <font color="green">rv_i</font> "

    x[rd] = pc + sext(imm20[31:12] << 12).

    Add the sign-extended 20-bit immediate, left-shifted by 12 bits, to the pc, and write the result to x[rd].

??? question "<font color="red">ave</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .
