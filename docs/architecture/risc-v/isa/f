
??? summary "<font color="red">fabs.d</font> rd, rs (Floating-point Absolute Value). <font color="green">pseudo</font>, <font color="green"> rv_f</font> "

    f[rd] = |f[rs]|.

    Write the absolute value of the double-precision floating-point number in f[rs1] to f[rd].
	
    fsgnjx.d rd, rs, rs

??? summary "<font color="red">fabs.s</font> rd, rs (Floating-point Absolute Value). <font color="green">pseudo</font>, <font color="green"> rv_f</font> "

    f[rd] = |f[rs1]|.

    Write the absolute value of the single-precision floating-point number in f[rs1] to f[rd].

	fsgnjx.s rd, rs, rs


??? summary "<font color="red">fadd.d</font> rd, rs1, rs2 (Floating-point Add, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = f[rs1] + f[rs2].

    Add the double-precision floating-point numbers in register f[rs1] and f[rs2], and write the rounded double-precision sum to f[rd].

??? question "<font color="red">fadd.h</font> rd, rs1, rs2, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fadd.q</font> rd, rs1, rs2, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fadd.s</font> rd, rs1, rs2, rm (Floating-point Add, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = f[rs1] + f[rs2].

    Add the single-precision floating-point numbers in registers f[rs1] and f[rs2] and write the rounding single-precision sum to f[rd].

??? summary "<font color="red">fclass.d</font> rd, rs1 (Floating-point Classify, Double-Precision). <font color="green">rv_d</font> "

    x[rd] = calssify_d(f[rs1]).

    Write to x[rd] a mask indicating the class of the double-precision floating-point number in f[rs1].

??? question "<font color="red">fclass.h</font> rd, rs1 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fclass.q</font> rd, rs1 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fclass.s</font> rd, rs1 (Floating-point Classify, Single-Precision). <font color="green">rv_f</font> "

    x[rd] = classify_s(f[rs1]).

    Write to x[rd] a mask indicating the class of the single-precision floating-point number in f[rs1]. Excatly one bit in x[rd] is set:

    ```
    x[rd]     Meaning
    bit
    0         f[rs1] is $- \infty$.
    1         f[rs1] is a negative normal number.
    2         f[rs1] is a negative subnormal number.
    3         f[rs1] is -0.
    4         f[rs1] is +0.
    5         f[rs1] is a positive subnormal number.
    6         f[rs1] is a positive normal number.
    7         f[rs1] is $+ \infty$.
    8         f[rs1] is a signaling NaN.
    9         f[rs1] is a quiet NaN.
    ```

??? question "<font color="red">fcvt.d.h</font> rd, rs1, rm (). <font color="green">rv_d_zfh</font> "

    .

??? summary "<font color="red">fcvt.d.l</font> rd, rs1, rm (Floating-point Convert to Double from Long). <font color="green">rv64_d</font> "

    f[rd] = f64_s64(x[rs1]).

    Convert the 64-bit two's complement integer in x[rs1] to a double-precision floating-point number and write it to f[rd].

??? summary "<font color="red">fcvt.d.lu</font> rd, rs1, rm (Floating-point Convert to Double from Unsigned Long). <font color="green">rv64_d</font> "

    f[rd] = f64_u64(x[rs1]).

    Convert the 64-bit unsigned integer in x[rs1] to a double-precision floating-point number and write it to f[rd].

??? question "<font color="red">fcvt.d.q</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fcvt.d.s</font> rd, rs1, rm (Floating-point Convert to Double from Single). <font color="green">rv_d</font> "

    f[rd] = f64_f32(f[rs1]).

    Convert the single-precision floating-point number in f[rs1] to a double-precision floating-point number and write it to f[rd].

??? summary "<font color="red">fcvt.d.w</font> rd, rs1, rm (Floating-point Convert to Double from Word). <font color="green">rv_d</font> "

    f[rd] = f64_s32(x[rs1]).

    Convert the 32_bit two's complement integer in x[rs1] to a double-precision floating-point number and write it to f[rd].

??? summary "<font color="red">fcvt.d.wu</font> rd, rs1, rm (Floating-point Convert to Double from unsigned Word). <font color="green">rv_d</font> "

    f[rd] = f64_u32(x[rs1]).

    Convert the 32-bit unsigned integer in x[rs1] to a double-precision floating-point number and write it to f[rd].

??? question "<font color="red">fcvt.h.d</font> rd, rs1, rm (). <font color="green">rv_d_zfh</font> "

    .

??? question "<font color="red">fcvt.h.l</font> rd, rs1, rm (). <font color="green">rv64_zfh</font> "

    .

??? question "<font color="red">fcvt.h.lu</font> rd, rs1, rm (). <font color="green">rv64_zfh</font> "

    .

??? question "<font color="red">fcvt.h.q</font> rd, rs1, rm (). <font color="green">rv_q_zfh</font> "

    .

??? question "<font color="red">fcvt.h.s</font> rd, rs1, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fcvt.h.w</font> rd, rs1, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fcvt.h.wu</font> rd, rs1, rm (). <font color="green">rv_zfh</font> "

    .

??? summary "<font color="red">fcvt.l.d</font> rd, rs1, rm (Floating-point Convert to Long from Double). <font color="green">rv64_d</font> "

    x[rd] = s64_f64(f[rs1]).

    Convert the double-precision floating-point number in register f[rs1] to a 64-bit two's complement integer and write it to x[rd].

??? question "<font color="red">fcvt.l.h</font> rd, rs1, rm (). <font color="green">rv64_zfh</font> "

    .

??? question "<font color="red">fcvt.l.q</font> rd, rs1, rm (). <font color="green">rv64_q</font> "

    .

??? summary "<font color="red">fcvt.l.s</font> rd, rs1, rm (Floating-point Convert to Long from Single). <font color="green">rv64_f</font> "

    x[rd] = s64_f32(f[rs1]).

    Convert the single-precision floating-point number in register f[rs1] to a 64-bit two's complement integer and write it to x[rd].

??? summary "<font color="red">fcvt.lu.d</font> rd, rs1, rm (Floating-point Convert to Unsigned Long from Double). <font color="green">rv64_d</font> "

    x[rd] = u64_f64(f[rs1]).

    Convert the double-precision floating-point number in register f[rs1] to a 64-bit unsigned integer and write it to x[rd].

??? question "<font color="red">fcvt.lu.h</font> rd, rs1, rm (). <font color="green">rv64_zfh</font> "

    .

??? question "<font color="red">fcvt.lu.q</font> rd, rs1, rm (). <font color="green">rv64_q</font> "

    .

??? summary "<font color="red">fcvt.lu.s</font> rd, rs1, rm (Convert to Unsigned Long from Single). <font color="green">rv64_f</font> "

    x[rd] = u64_f32(f[rs1]).

    Convert the single-precision floating-point number in register f[rs1] to a 64-bit unsigned integer and write it to x[rd].

??? question "<font color="red">fcvt.q.d</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? question "<font color="red">fcvt.q.h</font> rd, rs1, rm (). <font color="green">rv_q_zfh</font> "

    .

??? question "<font color="red">fcvt.q.l</font> rd, rs1, rm (). <font color="green">rv64_q</font> "

    .

??? question "<font color="red">fcvt.q.lu</font> rd, rs1, rm (). <font color="green">rv64_q</font> "

    .

??? question "<font color="red">fcvt.q.s</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? question "<font color="red">fcvt.q.w</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? question "<font color="red">fcvt.q.wu</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fcvt.s.d</font> rd, rs1, rm (Floating-point Convert to Single from Double). <font color="green">rv_d</font> "

    f[rd] = f32_f64(f[rs1]).

    Convert the double-precision floating-point number if f[rs1] to a single-precision floating-point number and write it to f[rd].

??? question "<font color="red">fcvt.s.h</font> rd, rs1, rm (). <font color="green">rv_zfh</font> "

    .

??? summary "<font color="red">fcvt.s.l</font> rd, rs1, rm (Floating-point Convert to Single from Long). <font color="green">rv64_f</font> "

    f[rd] = f32_s64(x[rs1]).

    Convert the 64-bit two's complement integer in x[rs1] to a single-precision floating-point number and write it to f[rd].

??? summary "<font color="red">fcvt.s.lu</font> rd, rs1, rm (Floating-point Convert to Single from Unsigned Long). <font color="green">rv64_f</font> "

    f[rd] = f32_u64(x[rs1]).

    Convert the 64-bit unsigned integer in x[rs1] to a single-precision floating-point number and write it to f[rd].

??? question "<font color="red">fcvt.s.q</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fcvt.s.w</font> rd, rs1, rm (Floating-point Convert to Single from Word). <font color="green">rv_f</font> "

    f[rd] = f32_s32(x[rs1]).

    Convert the 32-bit two's complement integer in x[rs1] to a single-precision floating-point number and write it to f[rd].

??? summary "<font color="red">fcvt.s.wu</font> rd, rs1, rm (Floating-point Convert to Single from Unsigned Word). <font color="green">rv_f</font> "

    f[rd] = f32_u32(x[rs1]).

    Convert the 32-bit unsigned integer in x[rs1] to a single-precision floating-point number and write it to f[rd].

??? summary "<font color="red">fcvt.w.d</font> rd, rs1, rm (Floating-point Convert to Word from Double). <font color="green">rv_d</font> "

    x[rd] = sext(s32_f64(f[rs1])).

    Convert the double-precision floating-point number in register f[rs1] to a 32-bit two's complement integer and write the sign-extended result to x[rd].

??? question "<font color="red">fcvt.w.h</font> rd, rs1, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fcvt.w.q</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fcvt.w.s</font> rd, rs1, rm (Floating-point Convert to Word from Single). <font color="green">rv_f</font> "

    x[rd] = sext(s32_f32(f[rs1])).

    Convert the single-precision floating-point number in register f[rs1] to a 32-bit two's complement integer and write the sign-extended result to x[rd].

??? summary "<font color="red">fcvt.wu.d</font> rd, rs1, rm (Floating-point Convert to Unsigned Word from Double). <font color="green">rv_d</font> "

    x[rd] = sext(u32_f64(f[rs1])).

    Convert the double-precision floating-point number in register f[rs1] to a 32-bit unsigned integer and write the sign-extended result to x[rd].

??? question "<font color="red">fcvt.wu.h</font> rd, rs1, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fcvt.wu.q</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fcvt.wu.s</font> rd, rs1, rm (Floating-point Convert to Unsigned Word from Single). <font color="green">rv_f</font> "

    x[rd] = sext(u32_f32(f[rs1])).

    Convert the single-precision floating-point number in register f[rs1] to a 32-bit unsigned integer and write the sign-extended result to x[rd].

??? summary "<font color="red">fdiv.d</font> rd, rs1, rs2, rm (Floating-point Divide, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = f[rs1] / f[rs2].

    Divide the double-precision floating-point number in register f[rs1] by f[rs2] and write the rounded double-precision quotient to f[rd].

??? question "<font color="red">fdiv.h</font> rd, rs1, rs2, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fdiv.q</font> rd, rs1, rs2, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fdiv.s</font> rd, rs1, rs2, rm (Floating-point Divide, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = f[rs1] / f[rs2].

    Divide the single-precision floating-point number in register f[rs1] by f[rs2] and write the rounded double-precision quotient to f[rd].

??? summary "<font color="red">fence</font> pred, succ (Fence Memory and I/O). <font color="green">rv_i</font> "

    Fence(pred, succ).

    Renders preceding memory and I/O accesses in the pred(ecessor) set observable to other threads and devices before subsequence memory and I/O accesses in the succ(essor) set become observable.
    
    Bits 3,2,1,0 in these sets correspond to device input, device output, memory reads, memory writes, respectively.

    For example fence r, rw, orders older reads with younger reads and writes, and is encoded with pred=0010, succ=0011.

    If the arguments are omitted, a full fence iorw, iorw is implied.

??? summary "<font color="red">fence</font> (Fence Memory and I/O). <font color="green">pseudo</font> "

    see `fence pred, succ`.

	fence iorw, iorw

??? summary "<font color="red">fence.i</font> imm12, rs1, rd (Fence Instruction Stream). <font color="green">rv_zifencei</font>, <font color="green"> rv_i</font> "

    Fence(Store, Fetch).

    Render stores to instruction memory observable to subsequence instruction feteches.

??? question "<font color="red">fence.tso</font>  (). <font color="green">rv_i</font> "

    .

??? summary "<font color="red">feq.d</font> rd, rs1, rs2 (Floating-point Equals, Double-Precision). <font color="green">rv_d</font> "

    x[rd] = f[rs1] == f[rs2].

    Write 1 to x[rd] if the double-precision floating-point number in f[rs1] equals the number in f[rs2], and 0 if not.

??? question "<font color="red">feq.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">feq.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">feq.s</font> rd, rs1, rs2 (Floating-point Equals, Single-Precision). <font color="green">rv_f</font> "

    x[rd] = f[rs1] == f[rs2].

    Write 1 to x[rd] if the single-precision floating-point number in f[rs1] equals the number in f[rs2], and 0 if not.

??? summary "<font color="red">fld</font> rd, offsrt(rs1) (Floating-point Load Doubleword). <font color="green">rv_d</font> "

    f[rd] = M[x[rs1] + sext(offset)][63:0].

    Loads a double-precision floating-point number from memory address x[rs1] + sign-extened(offset) and write it to f[rd].

??? summary "fl{w|d} rd, symbol, rt (Floating-point load global). <font color="green">pseudo</font> "

    auipc rt, delta[31 : 12] + delta[11]
    fl{w|d} rd, delta[11:0](rt)

??? summary "<font color="red">fle.d</font> rd, rs1, rs2 (Floating-point Less Than or Equal, Double-Precision). <font color="green">rv_d</font> "

    x[rd] = f[rs1] <= f[rs2].

    Write 1 to x[rd] if the double-precision floating-point number in f[rs1] os less than or equal to the number in f[rs2], and 0 if not.

??? question "<font color="red">fle.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fle.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fle.s</font> rd, rs1, rs2 (Floating-point Less Than or Equal, Single-Precision). <font color="green">rv_f</font> "

    x[rd] = f[rs1] <= f[rs2].

    Write 1 to x[rd] if the single-precision floating-point number in f[rs1] os less than or equal to the number in f[rs2], and 0 if not.

??? question "<font color="red">flh</font> rd, rs1, imm12 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">flq</font> rd, rs1, imm12 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">flt.d</font> rd, rs1, rs2 (Floating-point Less Than, Single-Precision). <font color="green">rv_d</font> "

    x[rd] = f[rs1] < f[rs2].

    Write 1 to x[rd] if the double-precision floating-point number in f[rs1] os less than the number in f[rs2], and 0 if not.

??? question "<font color="red">flt.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">flt.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">flt.s</font> rd, rs1, rs2 (Floating-point Less Than, Single-Precision). <font color="green">rv_f</font> "

    x[rd] = f[rs1] < f[rs2].

    Write 1 to x[rd] if the single-precision floating-point number in f[rs1] os less than the number in f[rs2], and 0 if not.

??? summary "<font color="red">flw</font> rd, offset(rs1) (Floating-point Load Word). <font color="green">rv_f</font> "

    f[rd] = M[x[rs1] + sext(offset)][31:0].

    Load a single-precision floating-point number from memory address x[rs1] + sign-extended(offset) and write it to f[rd].

??? summary "<font color="red">fmadd.d</font> rd, rs1, rs2, rs3, rm (Floating-point Fused multiply-Add, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = f[rs1] * f[rs2] + f[rs3].

    Multiply the double-precision floating-point numbers in f[rs1] and f[rs2], add the unrounded product to the double-precision floating-point number in f[rs3], write the rounded double-precision result to f[rd].

??? question "<font color="red">fmadd.h</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fmadd.q</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fmadd.s</font> rd, rs1, rs2, rs3, rm (Floating-point Fused Multiply-Add, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = f[rs1] * f[rs2] + f[rs3].

    Multiply the single-precision floating-point numbers in f[rs1] and f[rs2], add the unrounded product to the single-precision floating-point number in f[rs3], write the rounded single-precision result to f[rd].

??? summary "<font color="red">fmax.d</font> rd, rs1, rs2 (Floating-point Maximum, Double-Precision). <font color="green">rv_f</font> "

    f[rd] = MAX(f[rs1], f[rs2]).

    Copy the larger of the double-precision floating-point numbers in register f[rs1] and f[rs2] to f[rd].


??? question "<font color="red">fmax.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fmax.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fmax.s</font> rd, rs1, rs2 (Floating-point Maximum, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = MAX(f[rs1], f[rs2]).

    Copy the larger of the single-precision floating-point numbers in register f[rs1] and f[rs2] to f[rd].

??? summary "<font color="red">fmin.d</font> rd, rs1, rs2 (Floating-point Minimum, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = MIN(f[rs1], f[rs2]).

    Copy the smaller of the double-precision floating-point numbers in register f[rs1] and f[rs2] to f[rd].

??? question "<font color="red">fmin.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fmin.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fmin.s</font> rd, rs1, rs2 (Floating-point Mimimum, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = MIN(f[rs1], f[rs2]).

    Copy the smaller of the single-precision floating-point numbers in register f[rs1] and f[rs2] to f[rd].

??? summary "<font color="red">fmsub.d</font> rd, rs1, rs2, rs3, rm (Floating-point Fused Multiply-Subtract, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = f[rs1] * f[rs2] - f[rs3].

    Multiply the double-precision floating-point numbers in registers f[rs1] and f[rs2], subtract the double-precision floating-point number in f[rs3] from the unrounded product, and write the rounded double-precision result to f[rd].

??? question "<font color="red">fmsub.h</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fmsub.q</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fmsub.s</font> rd, rs1, rs2, rs3 (Floating-point Fused Multiply-Subtract, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = f[rs1] * f[rs2] - f[rs3].

    Multiply the single-precision floating-point numbers in registers f[rs1] and f[rs2], subtract the single-precision floating-point number in f[rs3] from the unrounded product, and write the rounded single-precision result to f[rd].

??? summary "<font color="red">fmul.d</font> rd, rs1, rs2, rm (Floating-point Multiply, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = f[rs1] * f[rs2].

    Multiply the double-precision floating-point numbers in registers f[rs1] and f[rs2], write the rounded double-precision product to f[rd].

??? question "<font color="red">fmul.h</font> rd, rs1, rs2, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fmul.q</font> rd, rs1, rs2, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fmul.s</font> rd, rs1, rs2, rm (Floating-point Multiply, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = f[rs1] * f[rs2].

    Multiply the single-precision floating-point numbers in registers f[rs1] and f[rs2], write the rounded single-precision product to f[rd].

??? summary "<font color="red">fmv.d</font> rd, rs (Floating-point Move). <font color="green">pseudo</font>, <font color="green"> rv64_d</font> "

    f[rd] = f[rs1].

    Copy the double-precision floating-point number in f[rs1] to f[rd].

	fsgnj.d rd, rs, rs

??? summary "<font color="red">fmv.d.x</font> rd, rs1 (Floating-point Move Doubleword from Integer). <font color="green">rv64_d</font> "

    f[rd] = x[rs1][63:0].

    Copy the double-precision floating-point number in register x[rs1] to f[rd].

??? question "<font color="red">fmv.h.x</font> rd, rs1 (). <font color="green">rv_zfh</font> "

    .

??? summary "<font color="red">fmv.s</font> rd, rs (Floating-point Move). <font color="green">pseudo</font>, <font color="green"> rv_f</font> "

    f[rd] = f[rs].

    Copy the single-precision floating-point number in f[rs1] to f[rd].

	fsgnj.s rd, rs, rs


??? summary "<font color="red">fmv.s.x</font> rd, rs1 (Floating-point Move Word from Integer). <font color="green">rv_f</font> "

    > Instructions FMV.S.X and FMV.X.S were renamed to FMV.W.X and FMV.X.W respectively 
    to be more consistent with their semantics, which did not change. The old names will continue 
    to be supported in the tools.

??? summary "<font color="red">fmv.w.x</font> rd, rs1 (Floating-point Move Word from Integer). <font color="green">rv_f</font> "

    f[rd] = x[rs1][31:0].

    Copy the single-precision floating-point number in register x[rs1] to f[rd].

??? summary "<font color="red">fmv.x.d</font> rd, rs1 (Floating-point Move Doubleword to Integer). <font color="green">rv64_d</font> "

    x[rd] = f[rs1][63:0].

    Copy the double-precision floating-point number in register f[rs1] to x[rd].

??? question "<font color="red">fmv.x.h</font> rd, rs1 (). <font color="green">rv_zfh</font> "

    .

??? summary "<font color="red">fmv.x.s</font> rd, rs1 (Floating-point Move Word to Integer). <font color="green">rv_f</font> "

    > Instructions FMV.S.X and FMV.X.S were renamed to FMV.W.X and FMV.X.W respectively 
    to be more consistent with their semantics, which did not change. The old names will continue 
    to be supported in the tools.

??? summary "<font color="red">fmv.x.w</font> rd, rs (Floating-point Move Word to Integer). <font color="green">rv_f</font> "

    x[rd] = sext(f[rs][31:0]).

    Copy the single-precision floating-point number in register f[rs] to x[rd], sign-extending the result for RV64F.

??? summary "<font color="red">fneg.d</font> rd, rs (Floating-point Negate). <font color="green">pseudo</font>, <font color="green"> rv_d</font> "

    f[rd] = -f[rs].

    Write the opposite of the double-precision floating-point number in f[rs] to f[rd].

	fsgnjn.d rd, rs, rs


??? summary "<font color="red">fneg.s</font> rd, rs (Floating-point Negate). <font color="green">pseudo</font>, <font color="green"> rv_f</font> "

    f[rd] = -f[rs].

    Write the opposite of the single-precision floating-point number in f[rs] to f[rd].

	fsgnjn.s rd, rs, rs


??? summary "<font color="red">fnmadd.d</font> rd, rs1, rs2, rs3, rm (Floating-point Fused Negative Multiply-Add, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = -f[rs1] * f[rs2] - f[rs3].

    Multiply the double-precision floating-point numbers in f[rs1] and f[rs2], negate the result, subtract the unrounded product to the double-precision floating-point number in f[rs3], and write the rounded double-precision result to f[rd].

??? question "<font color="red">fnmadd.h</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fnmadd.q</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fnmadd.s</font> rd, rs1, rs2, rs3, rm (Floating-point Fused Negative Multiply-Add, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = -f[rs1] * f[rs2] - f[rs3].

    Multiply the single-precision floating-point numbers in f[rs1] and f[rs2], negate the result, subtract the unrounded product to the single-precision floating-point number in f[rs3], and write the rounded single-precision result to f[rd].

??? summary "<font color="red">fnmsub.d</font> rd, rs1, rs2, rs3 (Floating-point Fused Negative Multiply-Subtract, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = -f[rs1] * f[rs2] + f[rs3].

    Multiply the double-precision floating-point numbers in f[rs1] and f[rs2], negate the result, add the unrounded product to the double-precision floating-point number in f[rs3], and write the rounded double-precision result to f[rd].

??? question "<font color="red">fnmsub.h</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fnmsub.q</font> rd, rs1, rs2, rs3, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fnmsub.s</font> rd, rs1, rs2, rs3 (Floating-point Fused Negative Multiply-Subtract, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = -f[rs1] * f[rs2] + f[rs3].

    Multiply the single-precision floating-point numbers in f[rs1] and f[rs2], negate the result, add the unrounded product to the single-precision floating-point number in f[rs3], and write the rounded single-precision result to f[rd].

??? summary "<font color="red">frcsr</font> rd (Floating-point Read Control and Status Register). <font color="green">rv_zicsr</font>, <font color="green"> pseudo</font>, <font color="green"> rv_f</font> "

    x[rd] = CSRs[fcsr].

    Copy the floating-point control and status register to x[rd].

	csrrs rd, fcsr, x0

??? summary "<font color="red">frflags</font> rd (Floating-point Read Exception Flags). <font color="green">rv_zicsr</font>, <font color="green"> pseudo</font> "

    x[rd] = CSRs[fflags].

    Copy the floating-point exception flags to x[rd].

	csrrs rd, fflags, x0

??? summary "<font color="red">frrm</font> rd (Floating-point Read Rounding Mode). <font color="green">rv_zicsr</font>, <font color="green"> pseudo</font> "

    x[rd] = CSRs[frm].

    Copy the floating-point rounding mode to x[rd].

	csrrs rd, frm, x0

??? summary "<font color="red">fscsr</font> rd, rs1 (Floating-point Swap Control and Status Register). <font color="green">rv_zicsr</font>, <font color="green"> pseudo</font> "

    t = CSRs[fcsr]; CSRs[fcsr] = x[rs1]; x[rd] = t.

    Copy x[rs1] to the floating-point control and status register, then copy the previous value of the floating-point control and status register to x[rd].

    if rd is ommitted, x0 is assumed.

	csrrw rd, fcsr, rs

??? summary "<font color="red">fscsr</font> rs (Write FP control/status register). <font color="green">pseudo</font> "

    see `fscsr rd, rs1`.

	csrrw x0, fcsr, rs

??? summary "<font color="red">fsd</font> rs2, offset(rs1) (Floating-point Store Doubleword). <font color="green">rv_d</font> "

    M[x[rs1] + sext(offset)] = f[rs2][63:0].

    Store the double-precision floating-point number in register f[rs2] to memory at address x[rs1] + sign-extened(offset).

??? summary "<font color="red">fsflags</font> rd, rs1 (Floating-point Swap Exception Flags). <font color="green">rv_zicsr</font>, <font color="green"> rv_f</font>, <font color="green"> pseudo</font> "

    t = CSRs[fflags]; CSRs[fflags] = x[rs1]; x[rd] = t.

    Copy x[rs1] to the floating-point exception flags register, then copy the previous floating-point exception flags to x[rd].

    If rd is omitted, x0 is assumed.

	csrrw rd, fflags, rs

??? summary "<font color="red">fsflags</font> rs (Floating-point Swap Exception Flags). <font color="green">pseudo</font> "

    see `fsflags rd, rs1`.

	csrrw x0, fflags, rs

??? summary "<font color="red">fsflagsi</font> rd, zimm (Floating-point ). <font color="green">rv_zicsr</font>, <font color="green"> pseudo</font> "

    see `fsflags rd, rs1`.

??? summary "<font color="red">fsgnj.d</font> rd, rs1, rs2 (Floating-point Sign Inject, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = {f[rs2][63], f[rs1][62:0]}.

    Construct a new double-precision floating point number from the exponent and significand of f[rs1], taking the sign of f[rs2], and write it to f[rd].

??? question "<font color="red">fsgnj.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fsgnj.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fsgnj.s</font> rd, rs1, rs2 (Floating-point Sign Inject, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = {f[rs2][31], f[rs1][30:0]}.

    Construct a new single-precision floating point number from the exponent and significand of f[rs1], taking the sign of f[rs2], and write it to f[rd].

??? summary "<font color="red">fsgnjn.d</font> rd, rs1, rs2 (Floating-point Sign Inject-Negate, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = {~f[rs2][63], f[rs1][62:0]}.

    Construct a new double-precision floating point number from the exponent and significand of f[rs1], taking the opposite sign of f[rs2], and write it to f[rd].

??? question "<font color="red">fsgnjn.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fsgnjn.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fsgnjn.s</font> rd, rs1, rs2 (Floating-point Sign Inject-Negate, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = {~f[rs2][31], f[rs1][30:0]}.

    Construct a new single-precision floating point number from the exponent and significand of f[rs1], taking the opposite sign of f[rs2], and write it to f[rd].

??? summary "<font color="red">fsgnjx.d</font> rd, rs1, rs2 (Floating-point Sign Inject-XOR, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = {f[rs1][63] ^ f[rs2][63], f[rs1][62:0]}.

    Construct a new double-precision floating-point number from the exponent and significand of f[rs1], taking the sign from the XOR of the signs of f[rs1] and f[rs2], and write it to f[rd].

??? question "<font color="red">fsgnjx.h</font> rd, rs1, rs2 (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fsgnjx.q</font> rd, rs1, rs2 (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fsgnjx.s</font> rd, rs1, rs2 (Floating-point Sign Inject-XOR, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = {f[rs1][31] ^ f[rs2][31], f[rs1][30:0]}.

    Construct a new single-precision floating-point number from the exponent and significand of f[rs1], taking the sign from the XOR of the signs of f[rs1] and f[rs2], and write it to f[rd].

??? question "<font color="red">fsh</font> imm12hi, rs1, rs2, imm12lo (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fsl</font> rd, rs1, rs2, rs3 (). <font color="green">rv_zbt</font> "

    .

??? question "<font color="red">fslw</font> rd, rs1, rs2, rs3 (). <font color="green">rv64_zbt</font> "

    .

??? question "<font color="red">fsq</font> imm12hi, rs1, rs2, imm12lo (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fsqrt.d</font> rd, rs1, rm (Floating-point Square Root, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = SQRT(f[rs1]).

    Compute the square root of the double-precision floating-point number in register f[rs1] and write the rounded double-precision result to f[rd].

??? question "<font color="red">fsqrt.h</font> rd, rs1, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fsqrt.q</font> rd, rs1, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fsqrt.s</font> rd, rs1, rm (Floating-point Sqaure Root, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = SQRT(f[rs1]).

    Compute the square root of the single-precision floating-point number in register f[rs1] and write the rounded single-precision result to f[rd].

??? question "<font color="red">fsr</font> rd, rs1, rs2, rs3 (). <font color="green">rv32_zbpbo</font> "

    .

??? question "<font color="red">fsri</font> rd, rs1, rs3, shamtd (). <font color="green">rv64_zbt</font> "

    .

??? question "<font color="red">fsriw</font> rd, rs1, rs3, shamtw (). <font color="green">rv64_zbt</font> "

    .

??? summary "<font color="red">fsrm</font> rd, rs1 (Floating-point Swap Rounding Mode). <font color="green">rv_zicsr</font>, <font color="green"> rv_f</font>, <font color="green"> pseudo</font> "

    t = CSRs[frm]; CSRs[frm] = x[rs1]; x[rd] = t.

    Copy x[rs1] to the floating-point rounding mode register, then copy the previous floating-point rounding mode to x[rd].

	csrrw rd, frm, rs

??? summary "<font color="red">fsrm</font> rs (Write FP rounding mode). <font color="green">pseudo</font>, <font color="green"> rv_f</font> "

	csrrw x0, frm, rs

??? summary "<font color="red">fsrmi</font> rd, zimm (Floating-point Swap Rounding Mode Immediate). <font color="green">rv_zicsr</font>, <font color="green"> pseudo</font> "

    t = CSRs[frm]. CSRs[frm] = zimm; x[rd] = t;

??? question "<font color="red">fsrw</font> rd, rs1, rs2, rs3 (). <font color="green">rv64_zbpbo</font> "

    .

??? summary "<font color="red">fsub.d</font> rd, rs1, rs2, rm (Floating-point Subtract, Double-Precision). <font color="green">rv_d</font> "

    f[rd] = f[rs1] - f[rs2].

    Subtract the double-precision floating-point number in register f[rs2] from f[rs1] and write the rounded double-precision difference to f[rd].

??? question "<font color="red">fsub.h</font> rd, rs1, rs2, rm (). <font color="green">rv_zfh</font> "

    .

??? question "<font color="red">fsub.q</font> rd, rs1, rs2, rm (). <font color="green">rv_q</font> "

    .

??? summary "<font color="red">fsub.s</font> rd, rs1, rs2 (Floating-point Subtract, Single-Precision). <font color="green">rv_f</font> "

    f[rd] = f[rs1] - f[rs2].

    Subtract the single-precision floating-point number in register f[rs2] from f[rs1] and write the rounded single-precision difference to f[rd].

??? summary "<font color="red">fsw</font> rs2, offset(rs1) (Floating-point Store Word). <font color="green">rv_f</font> "

    M[x[rs1] + sext(offset)] = f[rs2][31:0].

    Store the single-precision floating-point number in register f[rs2] to memory at address x[rs1] + sign-extended(offset).

??? summary "fs{w|d} rd, symbol, rt (Floating-point store global). <font color="green">pseudo</font> "

    auipc rt, delta[31 : 12] + delta[11]
    fs{w|d} rd, delta[11:0](rt)
