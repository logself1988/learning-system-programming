??? summary "<font color="red">sb</font> rs2, offset(rs1) (Store Byte). <font color="green">rv_i</font> "

    M[x[rs1] + sext(offset)] = x[rs2][7:0].

    Store the least-significant byte in register x[rs2] to memory at address x[rs1] + sign-extend(offset).

??? summary "s{b|h|w|d} rd, symbol, rt (Store Global). <font color="green">pseudo</font> "

    ``` asm
    auipc rt, delta[31:12] + delta[11]
    s{b|h|w|d} rd, delta[11:0](rt)
    ```

??? summary "<font color="red">sbreak</font>  (Environment Breakpoint). <font color="green">rv_i</font> "

    > The SCALL and SBREAK instructions have been renamed to ECALL and EBREAK, respectively.
    Their encoding and functionality are unchanged.

??? summary "<font color="red">sc.d</font> rd, rs2, (rs1) (Store-Conditional Doubleword). <font color="green">rv64_a</font> "

    x[rd] = StoreConditional64(M[x[rs1]], x[rs2]).

    Store the eight bytes in register x[rs2] to memory at address x[rs1], provide there exists a load reservation on that memory address.
    Write 0 to x[rd] if the store succeeded, or a nonzero error code otherwise.

??? summary "<font color="red">sc.w</font> rd, rs1, rs2, aq, rl (Store-Conditional Word). <font color="green">rv_a</font> "

    x[rd] = StoreConditional32(M[x[rs1]], x[rs2]).

    Store the four bytes in register x[rs2] to memory at address x[rs1], provide there exists a load reservation on that memory address.
    Write 0 to x[rd] if the store succeeded, or a nonzero error code otherwise.

??? summary "<font color="red">scall</font> (Environment Call). <font color="green">rv_i</font> "

    > The SCALL and SBREAK instructions have been renamed to ECALL and EBREAK, respectively.
    Their encoding and functionality are unchanged..

??? question "<font color="red">sclip16</font> imm4, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sclip32</font> imm5, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sclip8</font> imm3, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">scmple16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">scmple8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">scmplt16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">scmplt8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? summary "<font color="red">sd</font> rs2, offset(rs1) (Store Doubleword). <font color="green">rv64_i</font> "

    M[x[rs1] + sext(offset)] = x[rs2][63:0].

    Store the eight bytes in register x[rs2] to memory at address x[rs1] + sign-extend(offset).

??? summary "<font color="red">seqz</font> rd, rs (Set if Equal to Zero). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	x[rd] = (x[rs] == 0).

    Write 1 to x[rd] if x[rs1] equals 0, or 0 if not.

    ``` asm
    sltiu rd, rs, 1
    ```

??? question "<font color="red">sext.b</font> rd, rs1 (). <font color="green">rv_zbb</font> "

    .

??? question "<font color="red">sext.h</font> rd, rs1 (). <font color="green">rv_zbb</font> "

    .

??? summary "<font color="red">sext.w</font> rd, rs (Sign-extend Word). <font color="green">pseudo</font> "

    Read the lower 32 bits of x[rs], sign-extend them, and write the result to x[rd].
    
    ``` asm
    addiw rd, rs, 0
    ```

??? question "<font color="red">sfence.inval.ir</font>  (). <font color="green">rv_svinval</font> "

    .

??? summary "<font color="red">sfence.vma</font> rs1, rs2 (Fence Virtual Memory). <font color="green">rv_s</font> "

    Fence(Store, AddressTranslation).

    Order preceding stores to the page tables with subsequent virtual-address translations. 
    When rs2=0, translations for all address spaces are affected; 
    otherwise, only translations for address space identified by x[rs2] are ordered.
    When rs1=0, translations for all virtual addresses in the selected address spaces are ordered; 
    otherwise, only translations for the page containing virtual address x[rs1] in the selected address spaces are ordered.

??? question "<font color="red">sfence.w.inval</font>  (). <font color="green">rv_svinval</font> "

    .

??? summary "<font color="red">sgtz</font> rd, rs (Set if Greater Than Zero). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	x[rd] = (x[rs] >s 0)
    
    Write 1 to x[rd] if x[rs2] is greater than 0, or 0 if not.
    
    ``` asm
    slt rd, x0, rs
    ```

??? summary "<font color="red">sh</font> rs2, offset(rs1) (Store Halfword). <font color="green">rv_i</font> "

    M[x[rs1] + sext(offset)] = x[rs2][15:0].

    Store the two least-significant bytes in register x[rs2] to memory at address x[rs1] + sign-extend(offset).

??? question "<font color="red">sh1add</font> rd, rs1, rs2 (). <font color="green">rv_zba</font> "

    .

??? question "<font color="red">sh1add.uw</font> rd, rs1, rs2 (). <font color="green">rv64_zba</font> "

    .

??? question "<font color="red">sh2add</font> rd, rs1, rs2 (). <font color="green">rv_zba</font> "

    .

??? question "<font color="red">sh2add.uw</font> rd, rs1, rs2 (). <font color="green">rv64_zba</font> "

    .

??? question "<font color="red">sh3add</font> rd, rs1, rs2 (). <font color="green">rv_zba</font> "

    .

??? question "<font color="red">sh3add.uw</font> rd, rs1, rs2 (). <font color="green">rv64_zba</font> "

    .

??? question "<font color="red">sha256sig0</font> rd, rs1 (). <font color="green">rv_zk</font> "

    .

??? question "<font color="red">sha256sig1</font> rd, rs1 (). <font color="green">rv_zk</font> "

    .

??? question "<font color="red">sha256sum0</font> rd, rs1 (). <font color="green">rv_zk</font> "

    .

??? question "<font color="red">sha256sum1</font> rd, rs1 (). <font color="green">rv_zk</font> "

    .

??? question "<font color="red">sha512sig0</font> rd, rs1 (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">sha512sig0h</font> rd, rs1, rs2 (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">sha512sig0l</font> rd, rs1, rs2 (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">sha512sig1</font> rd, rs1 (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">sha512sig1h</font> rd, rs1, rs2 (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">sha512sig1l</font> rd, rs1, rs2 (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">sha512sum0</font> rd, rs1 (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">sha512sum0r</font> rd, rs1, rs2 (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">sha512sum1</font> rd, rs1 (). <font color="green">rv64_zk</font> "

    .

??? question "<font color="red">sha512sum1r</font> rd, rs1, rs2 (). <font color="green">rv32_zk</font> "

    .

??? question "<font color="red">shfl</font> rd, rs1, rs2 (). <font color="green">rv_zbp</font> "

    .

??? question "<font color="red">shfli</font> rd, rs1, shamtw (). <font color="green">rv64_zbp</font> "

    .

??? question "<font color="red">shflw</font> rd, rs1, rs2 (). <font color="green">rv64_zbp</font> "

    .

??? question "<font color="red">sinval.vma</font> rs1, rs2 (). <font color="green">rv_svinval</font> "

    .

??? summary "<font color="red">sll</font> rd, rs1, rs2 (Shift Left Logical). <font color="green">rv_i</font> "

    x[rd] = x[rs1] << x[rs2].

    Shift register x[rs1] left by x[rs2] bit positions. 
    The vacated bits are filled with zeros, and the result is written to x[rd].
    The least-significant five bits of x[rs2] (or six bits for RV64I) form the shift amount; the upper bits are ignored.

??? question "<font color="red">sll16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sll32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">sll8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">slld</font> rd, rs1, rs2 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">slli</font> rd, rs1, shamt (Shift Left Logical Immediate). <font color="green">rv_i</font>, <font color="green"> rv128_i</font> "

    x[rd] = x[rs1] << shamt.

    Shift register x[rs1] left by shamt bit positions.
    The vacated bits are filled with zeros, and the result is written to x[rd].
    For RV32I, the instruction is only legal when shamt[5]=0.

??? question "<font color="red">slli16</font> imm4, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">slli32</font> imm5, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">slli8</font> imm3, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">slli.uw</font> rd, rs1, shamtd (). <font color="green">rv64_zba</font> "

    .

??? question "<font color="red">sllid</font> rd, rs1, shamtd (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">slliw</font> rd, rs1, shamtw (Shift Left Logical Word Immediate). <font color="green">rv64_i</font> "

    x[rd] = sext((x[rs1] << shamt)[31:0]).

    Shifts x[rs1] left by shamt bit positions.
    The vacated bits are filled with zeros, and the result is truncated to 32 bits, and the sign-extended 32-bit result is written to x[rd].
    The instruction is only legal when shamt[5]=0.

??? summary "<font color="red">sllw</font> rd, rs1, rs2 (Shift Left Logical Word). <font color="green">rv64_i</font> "

    x[rd] = sext((x[rs1] << x[rs2][4:0])[31:0]).

    Shift the lower 32 bits of x[rs1] left by x[rs1] bit positions.
    The vacated bits are filled with zeros, and the sign-extended 32-bit result is written to x[rd].
    The least-significant five bits of x[rs2] form the shift amount; the upper bits are ignored.

??? question "<font color="red">slo</font> rd, rs1, rs2 (). <font color="green">rv_b</font> "

    .

??? question "<font color="red">sloi</font> rd, rs1, shamtd (). <font color="green">rv_b</font> "

    .

??? question "<font color="red">sloiw</font> rd, rs1, shamtw (). <font color="green">rv64_b</font> "

    .

??? question "<font color="red">slow</font> rd, rs1, rs2 (). <font color="green">rv64_b</font> "

    .

??? summary "<font color="red">slt</font> rd, rs1, rs2 (Set if Less Than). <font color="green">rv_i</font> "

    x[rd] = x[rs1] <s x[rs2].

    Compare x[rs1] and x[rs2] as two's complement numbers, and write 1 to x[rd] if x[rs1] is smaller, or 0 if not.

??? summary "<font color="red">slti</font> rd, rs1, immediate (Set if Less Than Immediate). <font color="green">rv_i</font> "

    x[rd] = x[rs1] <s sext(immediate).

    Compare x[rs1] and the sign-extended immediate as two's complement numbers, and write 1 to x[rd] if x[rs1] is smaller, or 0 if not.

??? summary "<font color="red">sltiu</font> rd, rs1, immediate (Set if Less Than Immediate). <font color="green">rv_i</font> "

    x[rd] = x[rs1] <u sext(immediate).

    Compare x[rs1] and the sign-extended immediate as unsigned numbers, and write 1 to x[rd] if x[rs1] is smaller, or 0 if not.

??? summary "<font color="red">sltu</font> rd, rs1, rs2 (Set if Less Than, Unsigned). <font color="green">rv_i</font> "

    x[rd] = x[rs1] <u x[rs2].

    Compare x[rs1] and x[rs2] as unsigned numbers, and write 1 to x[rd] if x[rs1] is smaller, or 0 if not.

??? summary "<font color="red">sltz</font> rd, rs (Set if Less Than Zero). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	x[rd] = (x[rs1] <s 0).

    Write 1 to x[rd] if x[rs1] is less than zero, or 0 if not.
    
    ``` asm	
    slt rd, rs, x0
    ```

??? question "<font color="red">sm3p0</font> rd, rs1 (). <font color="green">rv_zks</font> "

    .

??? question "<font color="red">sm3p1</font> rd, rs1 (). <font color="green">rv_zks</font> "

    .

??? question "<font color="red">sm4ed</font> rd, rs1, rs2, bs (). <font color="green">rv_zks</font> "

    .

??? question "<font color="red">sm4ks</font> rd, rs1, rs2, bs (). <font color="green">rv_zks</font> "

    .

??? question "<font color="red">smal</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smalbb</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smalbt</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smalda</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smaldrs</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smalds</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smaltt</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smalxda</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smalxds</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smaqa</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smaqa.su</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smar64</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smax16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smax32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">smax8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smbb16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smbt16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smbt32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">smdrs</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smdrs32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">smds</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smds32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">smin16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smin32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">smin8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smmul</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smmul.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smmwb</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smmwb.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smmwt</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smmwt.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smslda</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smslxda</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smsr64</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smtt16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smtt32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">smul16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smul8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smulx16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smulx8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smxds</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">smxds32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? summary "<font color="red">snez</font> rd, rs (Set if Not Equal to Zero). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	x[rd] = (x[rs] != 0).

    Write 0 to x[rd] if x[rs] equals 0, or 1 if not.
    
    ``` asm
    sltu rd, x0, rs
    ```

??? question "<font color="red">sq</font> imm12hi, rs1, rs2, imm12lo (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">sra</font> rd, rs1, rs2 (Shift Right Arithmetic). <font color="green">rv_i</font> "

    x[rd] = x[rs1] >>s x[rs2].

    Shift register x[rs1] right by x[rs2] bit positions.
    The vacated bits are filled with copies of x[rs1]'s most-significant bit, and write the result to x[rd].
    The least-significant five bits of x[rs2] (or six bits for RV64I) form the shift amount; the upper bits are ignored.

??? question "<font color="red">sra16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sra16.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sra32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">sra32.u</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">sra8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sra8.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sra.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srad</font> rd, rs1, rs2 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">srai</font> rd, rs1, shamt (Shift Right Arithmetic Immediate). <font color="green">rv_i</font>, <font color="green"> rv128_i</font> "

    x[rd] = x[rs1] >>s shamt.

    Shift register x[rs1] right by shamt bit positions. 
    The vacated bits are filled with copies of x[rs1]'s most-significant bit, and write result to x[rd].
    For RV32I, the instruction is only legal when shamt[5]=0.

??? question "<font color="red">srai16</font> imm4, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srai16.u</font> imm4, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srai32</font> imm5, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">srai32.u</font> imm5, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">srai8</font> imm3, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srai8.u</font> imm3, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srai.u</font> imm6, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sraid</font> rd, rs1, shamtd (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">sraiw</font> rd, rs1, shamtw (Shift Right Arithmetic Word Immediate). <font color="green">rv64_i</font> "

    x[rd] = sex(x[rs1][31:0] >>s shamt)
    
    Shift the lower 32 bits of x[rs1] right by shamt bit positions.
    The vacated bits are filled with copies of x[rs1][31], and the sign-extended 32-bit result is written to x[rd].
    The instruction is only legal when shamt[5]=0.

??? question "<font color="red">sraiw.u</font> imm5, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? summary "<font color="red">sraw</font> rd, rs1, rs2 (Shift Right Arithmetic Word). <font color="green">rv64_i</font> "

    x[rd] = sext(x[rs1][31:0] >>s x[rs2][4:0]).

    Shift the lower 32 bits of x[rs1] right by x[rs2] bit positions.
    The vacated bits are filled with x[rs1][31], and the sign-extended 32-bit result is written to x[rd].
    The least-significant five bits of x[rs2] form the shift amount; the upper bits are ignored.

??? summary "<font color="red">sret</font>  (Supervisor-mode Exception Return). <font color="green">rv_s</font> "

    ExceptionReturn(Supervisor).
    
    Return from a supervisor-mode exception handler.
    Set the pc to CSRs[sepc], the privilege mode to CSRs[sstatus].SPP, CSRs[sstatus].SIE to CSRs[sstatus].SPIE, CSRs[sstatus].SPIE to 1,
    and CSRS[sstatus].SPP to 0.
 
??? summary "<font color="red">srl</font> rd, rs1, rs2 (Shift Right Logical). <font color="green">rv_i</font> "

    x[rd] = x[rs1] >>u x[rs2].

    Shift register x[rs1] right by x[rs2] bit positions.
    The vacated bits are filled with zeros, and the result is written to x[rd].
    The least-significant five bits of x[rs2] (or six bits for RV64I) form the shift amount; the upper bits are ignored.

??? question "<font color="red">srl16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srl16.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srl32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">srl32.u</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">srl8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srl8.u</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srld</font> rd, rs1, rs2 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">srli</font> rd, rs1, shamt (Shift Right Logical Immediate). <font color="green">rv_i</font>, <font color="green"> rv128_i</font> "

    x[rd] = x[rs1] >>u shamt.

    Shift register x[rs1] right by shamt bit positions.
    The vacated bits are filled with zeros, and the result is written to x[rd].
    For RV32I, the instruction is only legal when shamt[5]=0.

??? question "<font color="red">srli16</font> imm4, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srli16.u</font> imm4, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srli32</font> imm5, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">srli32.u</font> imm5, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">srli8</font> imm3, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srli8.u</font> imm3, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">srlid</font> rd, rs1, shamtd (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">srliw</font> rd, rs1, shamt (Shift Right Logical Word Immediate). <font color="green">rv64_i</font> "

    x[rd] = sext(x[rs1][31:0] >>u shamt).

    Shift the lower 32 bits of x[rs1] right by shamt bit positions.
    The vacated bits are filled with zeros, and the sign-extended 32-bit result is written to x[rd].
    The instruction is only legal when shamt[5]=0.

??? summary "<font color="red">srlw</font> rd, rs1, rs2 (Shift Right Logical Word). <font color="green">rv64_i</font> "

    x[rd] = sext(x[rs1][31:0] >>u x[rs2][4:0]).

    Shift the lower 32 bits of x[rs1] right by x[rs2] bit positions.
    The vacated bits are filled with zeros, and the sign-extended 32-bit result is written to x[rd].
    The least-significant five bits of x[rs2] form then shift amount; the upper bits are ignored.

??? question "<font color="red">sro</font> rd, rs1, rs2 (). <font color="green">rv_b</font> "

    .

??? question "<font color="red">sroi</font> rd, rs1, shamtd (). <font color="green">rv_b</font> "

    .

??? question "<font color="red">sroiw</font> rd, rs1, shamtw (). <font color="green">rv64_b</font> "

    .

??? question "<font color="red">srow</font> rd, rs1, rs2 (). <font color="green">rv64_b</font> "

    .

??? question "<font color="red">stas16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">stas32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">stsa16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">stsa32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? summary "<font color="red">sub</font> rd, rs1, rs2 (Subtract). <font color="green">rv_i</font> "

    x[rd] = x[rs1] - x[rs2].

    Subtract register x[rs2] from register x[rs1] and wite the result to x[rd].
    Arithmetic overflow is ignored.

??? question "<font color="red">sub16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sub32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">sub64</font> rs2, rs1, rd (). <font color="green">rv32_p</font> "

    .

??? question "<font color="red">sub8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">subd</font> rd, rs1, rs2 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">subw</font> rd, rs1, rs2 (Subtract Wrod). <font color="green">rv64_i</font> "

    x[rd] = sext((x[rs1] - x[rs2])[31:0]).
    
    Subtract register x[rs2] from register x[rs1], truncate the result to 32 bits, and write the sign-extended result to x[rd].
    Arithmetic overflow is ignored.

??? question "<font color="red">sunpkd810</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sunpkd820</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sunpkd830</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sunpkd831</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">sunpkd832</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? summary "<font color="red">sw</font> rs2, offset(rs1) (Store Word). <font color="green">rv_i</font> "

    M[x[rs1] + sext(offset)] = x[rs2][31:0].

    Store the four least-significant bytes in register x[rs2] to memory at address x[rs1] + sign-extend(offset).

??? question "<font color="red">swap8</font> rs1, rd (). <font color="green">rv_p</font> "

    .