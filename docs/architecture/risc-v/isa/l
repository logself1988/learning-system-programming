??? summary "<font color="red">la</font> rd, symbol (Load Address). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

    Load the address of symbol into x[rd].

    When assembling position-independent code (PIC, it expand into a load from the Global Offset Table (GOT):

    ``` asm
    auipc rd, delta[31 : 12] + delta[11]
    l{w|d} rd, rd, delta[11:0]
    ```

    where delta = GOT[symbol] − pc.

    Otherwise:

    ``` asm
    auipc rd, delta[31 : 12] + delta[11]
    addi rd, rd, delta[11:0]
    ```
    
    where delta = GOT[symbol] − pc

??? summary "<font color="red">lb</font> rd, offset(rs1) (Load Byte). <font color="green">rv_i</font> "

    x[rd] = sext(M[x[rs1] + sext(offset)][7:0]).

    Load a byte from memory at address x[rs1] + sign-extend(offset) and write it to x[rd], sign-extending the result.


??? summary "l{b|h|w|d} rd, symbol (Load global Byte|Halfword|Word|Doubleword). <font color="green">pseudo</font> "

    ``` asm
    auipc rd, delta[31 : 12] + delta[11]
    l{b|h|w|d} rd, delta[11:0](rd)
    ```

    where delta = GOT[symbol] − pc

??? summary "<font color="red">lbu</font> rd, offset(rs1) (Load Byte, Unsigned). <font color="green">rv_i</font> "

    x[rd] = M[x[rs1] + sext(offset)][7:0].

    Load a byte from memory at address x[rs1] + sign-extend(offset) and write it to x[rd], zero-extending the result.

??? summary "<font color="red">ld</font> rd, offset(rs1) (Load Doubleword). <font color="green">rv64_i</font> "

    x[rd] = M[x[rs1] + sext(offset)][63:0].

    Load eight bytes from memory at address x[rs1] + sign-extend(offset) and write them to x[rd].

??? question "<font color="red">ldu</font> rd, rs1, imm12 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">lh</font> rd, offset(rs1) (Load Halfword). <font color="green">rv_i</font> "

    x[rd] = sext(M[x[rs1] + sext(offset)][15:0]).

    Load two bytes from memory at address x[rs1] + sign-extend(offset) and write them to x[rd], sign-extending the result.

??? summary "<font color="red">lhu</font> rd, offset(rs1) (Load Halfword, Unsigned). <font color="green">rv_i</font> "

    x[rd] = M[x[rs1] + sext(offset)][15:0].

    Load two bytes from memory at address x[rs1] + sign-extend(offset) and write them to x[rd], zero-extending the result.

??? summary "<font color="red">li</font> rd, immediate (Load Immediate). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

    x[rd] = immediate.

	Load a constant into x[rd], using as few instructions as possible.

    For RV32I: lui and/or addi;
    For RV64I: lui, addi, slli, addi, slli, addi, slli, addi.

??? summary "<font color="red">lla</font> rd, symbol (Load Local Address). <font color="green">pseudo</font> "

    x[rd] = &symbol.
    
    Load the address of symbol into x[rd].

    ``` asm
    auipc rd, delta[31:12] + delta[11]
    addi rd, rd, delta[11:0]
    ```

    where delta = symbol − pc

??? question "<font color="red">lq</font> rd, rs1, imm12 (). <font color="green">rv128_i</font> "

    .

??? summary "<font color="red">lr.d</font> rd, (rs1) (Load-Reserved Doubleword). <font color="green">rv64_a</font> "

    x[rd] = LoadReserved64(M[x[rs1]]).

    Load the eight bytes from memory at address x[rs1], write them to x[rd], and register a reservation on that memory doubleword.

??? summary "<font color="red">lr.w</font> rd, (rs1) (Load-Reserved Word). <font color="green">rv_a</font> "

    x[rd] = LoadReserved32(M[x[rs1]]).

    Load the four bytes from memory at address x[rs1], write them to x[rd], sign-extending the result, and register a reservation on that memory doubleword.

??? summary "<font color="red">lui</font> rd, immediate (Load Upper Immediate). <font color="green">rv_i</font> "

    x[rd] = sext(immediate[31:12] << 12).

    Write the sign-extended 20-bit immediate, left-shifted by 12 bits, to x[rd], zeroing the lower 12 bits.

??? summary "<font color="red">lw</font> rd, offset(rs1) (Load Word). <font color="green">rv_i</font> "

    x[rd] = sext(M[x[rs1] + sext(offset)][31:0]).

    Load four bytes from memory at address x[rs1] + sign-extend(offset) and write them to x[rd].

    For RV64I, the result is sign-extended.

??? summary "<font color="red">lwu</font> rd, rs1, imm12 (Load Word, Unsigned). <font color="green">rv64_i</font> "

    x[rd] = M[x[rs1] + sext(offset)][31:0].

    Load four bytes from memory at address x[rs1] + sign-extend(offset) and write them to x[rd], zero-extending the result.