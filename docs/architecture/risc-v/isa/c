
??? question "<font color="red">c.add</font> rd_rs1, c_rs2_n0 (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.addi</font> rd_rs1_n0, c_nzimm6lo, c_nzimm6hi (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.addi16sp</font> c_nzimm10hi, c_nzimm10lo (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.addi4spn</font> rd_p, c_nzuimm10 (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.addiw</font> rd_rs1, c_imm6lo, c_imm6hi (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.addw</font> rd_rs1_p, rs2_p (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.and</font> rd_rs1_p, rs2_p (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.andi</font> rd_rs1_p, c_imm6hi, c_imm6lo (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.beqz</font> rs1_p, c_bimm9lo, c_bimm9hi (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.bnez</font> rs1_p, c_bimm9lo, c_bimm9hi (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.ebreak</font>  (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.fld</font> rd_p, rs1_p, c_uimm8lo, c_uimm8hi (). <font color="green">rv_c_d</font> "

    .

??? question "<font color="red">c.fldsp</font> rd, c_uimm9sphi, c_uimm9splo (). <font color="green">rv_c_d</font> "

    .

??? question "<font color="red">c.flw</font> rd_p, rs1_p, c_uimm7lo, c_uimm7hi (). <font color="green">rv32_c_f</font> "

    .

??? question "<font color="red">c.flwsp</font> rd, c_uimm8sphi, c_uimm8splo (). <font color="green">rv32_c_f</font> "

    .

??? question "<font color="red">c.fsd</font> rs1_p, rs2_p, c_uimm8lo, c_uimm8hi (). <font color="green">rv_c_d</font> "

    .

??? question "<font color="red">c.fsdsp</font> c_rs2, c_uimm9sp_s (). <font color="green">rv_c_d</font> "

    .

??? question "<font color="red">c.fsw</font> rs1_p, rs2_p, c_uimm7lo, c_uimm7hi (). <font color="green">rv32_c_f</font> "

    .

??? question "<font color="red">c.fswsp</font> c_rs2, c_uimm8sp_s (). <font color="green">rv32_c_f</font> "

    .

??? question "<font color="red">c.j</font> c_imm12 (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.jal</font> c_imm12 (). <font color="green">rv32_c</font> "

    .

??? question "<font color="red">c.jalr</font> c_rs1_n0 (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.jr</font> rs1_n0 (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.ld</font> rd_p, rs1_p, c_uimm8lo, c_uimm8hi (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.ldsp</font> rd_n0, c_uimm9sphi, c_uimm9splo (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.li</font> rd, c_imm6lo, c_imm6hi (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.lq</font> rd_p, rs1_p, c_uimm9lo, c_uimm9hi (). <font color="green">rv128_c</font> "

    .

??? question "<font color="red">c.lqsp</font> rd, c_uimm10sphi, c_uimm10splo (). <font color="green">rv128_c</font> "

    .

??? question "<font color="red">c.lui</font> rd_n2, c_nzimm18hi, c_nzimm18lo (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.lw</font> rd_p, rs1_p, c_uimm7lo, c_uimm7hi (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.lwsp</font> rd_n0, c_uimm8sphi, c_uimm8splo (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.mv</font> rd, c_rs2_n0 (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.nop</font> c_nzimm6hi, c_nzimm6lo (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.or</font> rd_rs1_p, rs2_p (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.sd</font> rs1_p, rs2_p, c_uimm8hi, c_uimm8lo (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.sdsp</font> c_rs2, c_uimm9sp_s (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.slli</font> rd_rs1_n0, c_nzuimm6hi, c_nzuimm6lo (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.sq</font> rs1_p, rs2_p, c_uimm9hi, c_uimm9lo (). <font color="green">rv128_c</font> "

    .

??? question "<font color="red">c.sqsp</font> c_rs2, c_uimm10sp_s (). <font color="green">rv128_c</font> "

    .

??? question "<font color="red">c.srai</font> rd_rs1_p, c_nzuimm6lo, c_nzuimm6hi (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.srli</font> rd_rs1_p, c_nzuimm6lo, c_nzuimm6hi (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.sub</font> rd_rs1_p, rs2_p (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.subw</font> rd_rs1_p, rs2_p (). <font color="green">rv64_c</font> "

    .

??? question "<font color="red">c.sw</font> rs1_p, rs2_p, c_uimm7lo, c_uimm7hi (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.swsp</font> c_rs2, c_uimm8sp_s (). <font color="green">rv_c</font> "

    .

??? question "<font color="red">c.xor</font> rd_rs1_p, rs2_p (). <font color="green">rv_c</font> "

    .

??? summary "<font color="red">call</font> offset (Call far-away subroutine). <font color="green">pseudo</font>, <font color="green"> rv_c</font> "

	``` asm
    auipc x1, offset[31:12] + offset[11]
    jalr x1, offset[11:0](x1)
    ```

    `call rd, symbol`   x[rd] = pc+8; pc = &symbol. Write the address of the next instruction (pc+8) to x[rd], then sets the pc to symbol.

??? question "<font color="red">cbo.clean</font> rs1 (). <font color="green">rv_zicbo</font> "

    .

??? question "<font color="red">cbo.flush</font> rs1 (). <font color="green">rv_zicbo</font> "

    .

??? question "<font color="red">cbo.inval</font> rs1 (). <font color="green">rv_zicbo</font> "

    .

??? question "<font color="red">cbo.zero</font> rs1 (). <font color="green">rv_zicbo</font> "

    .

??? question "<font color="red">clmul</font> rd, rs1, rs2 (). <font color="green">rv_zbkc</font> "

    .

??? question "<font color="red">clmulh</font> rd, rs1, rs2 (). <font color="green">rv_zbkc</font> "

    .

??? question "<font color="red">clmulr</font> rd, rs1, rs2 (). <font color="green">rv_zbc</font> "

    .

??? question "<font color="red">clo16</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clo32</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clo8</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clrs16</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clrs32</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clrs8</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clz</font> rd, rs1 (). <font color="green">rv32_zbpbo</font> "

    .

??? question "<font color="red">clz16</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clz32</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clz8</font> rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">clzw</font> rd, rs1 (). <font color="green">rv64_zbb</font> "

    .

??? question "<font color="red">cmix</font> rd, rs1, rs2, rs3 (). <font color="green">rv_zbpbo</font> "

    .

??? question "<font color="red">cmov</font> rd, rs1, rs2, rs3 (). <font color="green">rv_zbt</font> "

    .

??? question "<font color="red">cmpeq16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">cmpeq8</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">cpop</font> rd, rs1 (). <font color="green">rv_zbb</font> "

    .

??? question "<font color="red">cpopw</font> rd, rs1 (). <font color="green">rv64_zbb</font> "

    .

??? question "<font color="red">cras16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">cras32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? question "<font color="red">crc32.b</font> rd, rs1 (). <font color="green">rv_zbr</font> "

    .

??? question "<font color="red">crc32.d</font> rd, rs1 (). <font color="green">rv64_zbr</font> "

    .

??? question "<font color="red">crc32.h</font> rd, rs1 (). <font color="green">rv_zbr</font> "

    .

??? question "<font color="red">crc32.w</font> rd, rs1 (). <font color="green">rv_zbr</font> "

    .

??? question "<font color="red">crc32c.b</font> rd, rs1 (). <font color="green">rv_zbr</font> "

    .

??? question "<font color="red">crc32c.d</font> rd, rs1 (). <font color="green">rv64_zbr</font> "

    .

??? question "<font color="red">crc32c.h</font> rd, rs1 (). <font color="green">rv_zbr</font> "

    .

??? question "<font color="red">crc32c.w</font> rd, rs1 (). <font color="green">rv_zbr</font> "

    .

??? question "<font color="red">crsa16</font> rs2, rs1, rd (). <font color="green">rv_p</font> "

    .

??? question "<font color="red">crsa32</font> rs2, rs1, rd (). <font color="green">rv64_p</font> "

    .

??? summary "<font color="red">csrc</font> csr, rs (Control and Status Register Clear). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	CSRs[csr] &= ~x[rs].

    For each bit set in x[rs], clear the corresponding bit in control and status register csr.

    ``` asm
    csrrc x0, csr, rs
    ```

??? summary "<font color="red">csrci</font> csr, imm (Control and Status Register Immediate). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

    CSRs[csr] &= ~imm.

	For each bit set in the five-bit zero-extended immediate, clear the corresponding bit in control and status register csr.
    
    ``` asm
    csrrci x0, csr, imm
    ```

??? summary "<font color="red">csrr</font> rd, csr (Control and Status Register Read). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	x[rd] = CSRs[csr].

    Copy control and status register csr to x[rd].
    
    ``` asm
    csrrs rd, csr, x0
    ```

??? summary "<font color="red">csrrc</font> rd, rs1, csr (Control and Status Register Read and Clear). <font color="green">rv_zicsr</font>, <font color="green"> rv_i</font> "

    t = CSRs[csr]; CSRs[csr] = t & ~x[rs1]; x[rd] = t.

    Let `t` be the value of control and status register csr. Write the bitwise AND of `t` and the one's complement of x[rs1] to the csr, then write `t` to x[rd].

??? summary "<font color="red">csrrci</font> rd, csr, zimm (Control and Status Register Read and Clear Immediate). <font color="green">rv_zicsr</font>, <font color="green"> rv_i</font> "

    t = CSRs[csr]; CSRs[csr] = t & ~zimm; x[rd] = t.

    Let `t` be the value of control and status register csr. Write the bitwise AND of `t` and the one's complement of the five-bit zero-extended immediate zimm to the csr, then write `t` to x[rd].

??? summary "<font color="red">csrrs</font> rd, csr, rs1 (Control and Status Register Read and Set). <font color="green">rv_zicsr</font>, <font color="green"> rv_i</font> "

    t = CSRs[csr]; CSRs[csr] = t | x[rs1]; x[rd] = t.

    Let `t` be the value of control and status register csr. Write the bitwise OR of `t` and x[rs1] to the csr, then write `t` to x[rd].


??? summary "<font color="red">csrrsi</font> rd, csr, zimm (Control and Status Register Read and Set Immediate). <font color="green">rv_zicsr</font>, <font color="green"> rv_i</font> "

    t = CSRs[csr]; CSRs[csr] = t | zimm; x[rd] = t.

    Let `t` be the value of control and status register csr. Write the bitwise OR of `t` and the five-bit zero-extended immediate zimm to the csr, then write `t` to x[rd].

??? summary "<font color="red">csrrw</font> rd, csr, rs1 (Control and Status Register Read and Write). <font color="green">rv_zicsr</font>, <font color="green"> rv_i</font> "

    t = CSRs[csr]; CSRs[csr] = x[rs1]; x[rd] = t.

    Let `t` be the value of control and status register csr.
    Copy x[rs1] to the csr, then write `t` to x[rd].    

??? summary "<font color="red">csrrwi</font> rd, csr, zimm (Control and Status Register Read and Write Immediate). <font color="green">rv_zicsr</font>, <font color="green"> rv_i</font> "

    x[rd] = CSRs[csr]; CSRs[csr] = zimm.

    Copy the control and status register csr to x[rd], then write the five-bit zero-extended immediate zimm to the csr.

??? summary "<font color="red">csrs</font> csr, rs (Control and Status Register Set). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

    CSRs[csr] != x[rs].

    For each bit set in x[rs1], set the corresponding bit in control and status register csr.

	``` asm
    csrrs x0, csr, rs
    ```

??? summary "<font color="red">csrsi</font> csr, imm (Control and Status Register Set Immediate). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	CSRs[csr] != zimm.

    For each bit set in the five-bit zero-extended immediate, set the corresponding bit in control and status register csr.
    
    ``` asm
    csrrsi x0, csr, imm
    ```

??? summary "<font color="red">csrw</font> csr, rs (Control and Status Register Write). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

    CSRs[csr] = x[rs1]

    Copy x[rs1] to control and status register csr.

	``` asm
    csrrw x0, csr, rs
    ```

??? summary "<font color="red">csrwi</font> csr, imm (Control and Status Register Write Immediate). <font color="green">pseudo</font>, <font color="green"> rv_i</font> "

	Copy the five-bit zero-extended immediate to control and status register csr.
    
    ``` asm
    csrrwi x0, csr, imm
    ```

??? question "<font color="red">ctz</font> rd, rs1 (). <font color="green">rv_zbb</font> "

    .

??? question "<font color="red">ctzw</font> rd, rs1 (). <font color="green">rv64_zbb</font> "

    .
